

Accountant:
- asgi.py

"""
ASGI config for Accountant project.
It exposes the ASGI callable as a module-level variable named ``application``.
For more information on this file, see
https://docs.djangoproject.com/en/3.1/howto/deployment/asgi/
"""
import os
from django.core.asgi import get_asgi_application
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Accountant.settings')
application = get_asgi_application()

- settings.py

"""
Django settings for Accountant project.
Generated by 'django-admin startproject' using Django 3.1.7.
For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path
BASE_DIR = Path(__file__).resolve().parent.parent
DEBUG = True
ALLOWED_HOSTS = []
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'main',
    'accounting',
    'userPages',
]
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
ROOT_URLCONF = 'Accountant.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
WSGI_APPLICATION = 'Accountant.wsgi.application'
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'Accountant',
        'USER': 'accountant',
        'HOST': 'localhost',
    }
}
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True
import os
STATIC_URL = '/static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / "media"
STATICFILES_DIRS = [BASE_DIR / "static", ]
LOGIN_REDIRECT_URL = '/'
- urls.py

"""diploma URL Configuration
The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
urlpatterns = [
    path('admin/', admin.site.urls, name ='admin'),
    path('accounting/', include('accounting.urls'), name ='accounting'),
    path('user/', include('django.contrib.auth.urls'), name ='auth'),
    path('user/', include('userPages.urls'), name ='userPages'),
    path('', include('main.urls'), name ='main'),
]+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

- wsgi.py

"""
WSGI config for Accountant project.
It exposes the WSGI callable as a module-level variable named ``application``.
For more information on this file, see
https://docs.djangoproject.com/en/3.1/howto/deployment/wsgi/
"""
import os
from django.core.wsgi import get_wsgi_application
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Accountant.settings')
application = get_wsgi_application()



accounting:
- models.py

from django.db import models
from django.contrib.auth.models import User
from django.utils.timezone import now
class Bank(models.Model):
    name = models.CharField('Название', max_length=50, unique=True)
    image = models.ImageField(upload_to='BanksPictures', default='BanksPictures/default.png')
    def __str__(self):
        return f'{self.name}'
    class Meta:
        verbose_name = 'Банк'
        verbose_name_plural = 'Банки'
class Contract(models.Model):
    CONTRACT_TYPES = (
        ('B', 'Банковский'),
        ('I', 'Инвестиционный')
    )
    CURRENCY_TYPES = (
        ('RUB', 'Российский рубль'),
        ('USD', 'Доллар США'),
        ('EUR', 'Евро'),
        ('GBP', 'Фунт стерлингов Великобритании'),
        ('JPY', 'Японская йена'),
        ('CHF', 'Швейцарский франк'),
        ('CNY', 'Китайский юань'),
    )
    bankID = models.ForeignKey(Bank, on_delete=models.CASCADE)
    userID = models.ForeignKey(User, on_delete=models.CASCADE)
    name = models.CharField('Название', max_length=50)
    currency = models.CharField('Базовая валюта', max_length=3, choices=CURRENCY_TYPES, default='RUB')
    type = models.CharField('Тип договора', max_length=1, choices=CONTRACT_TYPES)
    def __str__(self):
        return f'{self.name} : {self.type}'
    class Meta:
        verbose_name = 'Договор'
        verbose_name_plural = 'Договоры'
class Stock(models.Model):
    STOCK_TYPES = (
        ('Action', 'Акция'),
        ('Bond', 'Облигация'),
        ('ETF', 'ETF'),
        ('Currency', 'Валюта'),
        ('Other', 'Другое')
    )
    CURRENCY_TYPES = (
        ('RUB', 'Российский рубль'),
        ('USD', 'Доллар США'),
        ('EUR', 'Евро'),
        ('GBP', 'Фунт стерлингов Великобритании'),
        ('JPY', 'Японская йена'),
        ('CHF', 'Швейцарский франк'),
        ('CNY', 'Китайский юань'),
    )
    tiker = models.CharField('Тикер', max_length=10)
    currency = models.CharField('Базовая валюта', max_length=3, choices=CURRENCY_TYPES, default='RUB')
    currentPrice = models.FloatField('текущая цена', null=True)
    def __str__(self):
        return f'{self.tikerCode} : {self.currentPrice}'
    class Meta:
        verbose_name = 'Ценная бумага'
        verbose_name_plural = 'Ценные бумаги'
class FinancialInstrument(models.Model):
    FINANCIAL_INSTRUMENT_TYPES = (
        ('B', 'Банковский'),
        ('I', 'Инвестиционный'),
        ('C', 'Валюта')
    )
    CURRENCY_TYPES = (
        ('RUB', '₽'),
        ('USD', '$'),
        ('EUR', '€'),
        ('GBP', '£'),
        ('JPY', '¥'),
        ('CHF', '₣'),
        ('CNY', '¥'),
    )
    contractID = models.ForeignKey(Contract, on_delete=models.CASCADE)
    stockID = models.ForeignKey(Stock, null=True, on_delete=models.CASCADE)
    name = models.CharField('Название', max_length=50)
    type = models.CharField('Тип финансового инструмента', max_length=1, choices=FINANCIAL_INSTRUMENT_TYPES)
    balance = models.FloatField('Баланс счёта', default=0)
    amount = models.FloatField('Количество', default=0)
    avgPrice = models.FloatField('Текущая цена', default=0)
    currency = models.CharField('Базовая валюта', max_length=3, choices=CURRENCY_TYPES, default='RUB')
    def __str__(self):
        return f'{self.name} : {self.type}'
    class Meta:
        verbose_name = 'Финансовый инструмент'
        verbose_name_plural = 'Финансовые инструменты'
class Category(models.Model):
    CATEGORY_TYPES = (
        ('S', 'Расходы'),
        ('I', 'Доходы'),
        ('T', 'Переводы')
    )
    userID = models.ForeignKey(User, on_delete=models.CASCADE)
    name = models.CharField('Название', max_length=50)
    type = models.CharField('Тип категории', max_length=1, choices=CATEGORY_TYPES, default='S')
    def __str__(self):
        return f'{self.name} : {self.type}'
    class Meta:
        verbose_name = 'Категория транзакции'
        verbose_name_plural = 'Категории транзакции'
class Operation(models.Model):
    OPERATION_TYPES = (
        ('S', 'Spending'),
        ('I', 'Income'),
        ('T', 'Transfer'),
        ('BS', 'Buying a stock'),
        ('SS', 'Sale of stock'),
        ('DIV', 'Dividends')
    )
    CURRENCY_TYPES = (
        ('RUB', 'Российский рубль'),
        ('USD', 'Доллар США'),
        ('EUR', 'Евро'),
        ('GBP', 'Фунт стерлингов Великобритании'),
        ('JPY', 'Японская йена'),
        ('CHF', 'Швейцарский франк'),
        ('CNY', 'Китайский юань'),
    )
    fromFinancialInstrumentID = models.ForeignKey(FinancialInstrument, related_name='fromFinancialInstrument', on_delete=models.CASCADE)
    toFinancialInstrumentID = models.ForeignKey(FinancialInstrument, related_name='toFinancialInstrument', on_delete=models.CASCADE, null=True)
    categoryID = models.ForeignKey(Category, related_name='toCategory', on_delete=models.CASCADE, null=True)
    type = models.CharField('Тип операции', max_length=5, choices=OPERATION_TYPES)
    sum = models.FloatField('Сумма сделки', default=0)
    dateTime = models.DateTimeField('Дата и время совершения сделки', default=now)
    currency = models.CharField('Базовая валюта', max_length=3, choices=CURRENCY_TYPES, default='RUB')
    def __str__(self):
        return f'{self.type} : {self.sum} : {self.currency}'
    class Meta:
        verbose_name = 'Операция'
        verbose_name_plural = 'Операции'

- apps.py

from django.apps import AppConfig
class AccountingConfig(AppConfig):
    name = 'accounting'

- forms.py

from .models import Bank, FinancialInstrument
from django.forms import ModelForm, TextInput, ImageField
class BankForm(ModelForm):
    class Meta:
        model = Bank
        fields = ['name', 'image']
        widgets = {
            'name': TextInput(attrs={
                'class': "form-control",
                'placeholder': "Название банка"
            }),
        }
class Bank(ModelForm):
    class Meta:
        model = FinancialInstrument
        fields = ['name', 'currency']

- operations.py

import django.db.models
from accounting.models import Bank, Contract, FinancialInstrument, Operation, Category, Stock
from yahoo_fin.stock_info import get_live_price as stockPrice
def getStockPrice(stock):
    if stock.currency == 'RUB':
        return stockPrice(stock.tiker + '.me')
    return stockPrice(stock.tiker)
def getCurrencyCoeff(fromCurrency, toCurrency):
    if fromCurrency != toCurrency:
        return stockPrice(f'{fromCurrency}{toCurrency}=X')
    else:
        return 1
def addBankAccount(request, bankName, FIName, FICurrency, FIBalance):
    try:
        bankObj = Bank.objects.get(name=bankName)
    except Bank.DoesNotExist:
        bankObj = Bank(name=bankName)
        bankObj.save()
    try:
        contractObj = Contract.objects.filter(userID=request.user).get(bankID=bankObj)
    except Contract.DoesNotExist:
        contractObj = Contract(bankID=bankObj, userID=request.user, name=f'Договор с банком {bankName}',
                               currency=FICurrency, type='B')
        contractObj.save()
    financialInstrumentObj = FinancialInstrument(contractID=contractObj, name=FIName, type='B',
                                                 currency=FICurrency, balance=FIBalance)
    financialInstrumentObj.save()
def addBrokerAccount(request, brokerName, accountName, accountCurrency, accountBalance):
    bankQuerySet = Bank.objects.filter(name=brokerName)
    if len(bankQuerySet) == 0:
        bankObj = Bank(name=brokerName)
        bankObj.save()
    else:
        bankObj = bankQuerySet[0]
    contractObj = Contract(bankID=bankObj, userID=request.user, name=accountName,
                           currency=accountCurrency, type='I')
    contractObj.save()
    financialInstrumentObj = FinancialInstrument(contractID=contractObj, name=accountCurrency, type='C',
                                                 currency=accountCurrency, balance=accountBalance)
    financialInstrumentObj.save()
def addOperation(request, FIObj, opCategory, opCurrency, opSum, type='S'):
    opSum = float(opSum)
    try:
        categoryObj = Category.objects.filter(name=opCategory).filter(type=type).get(userID=request.user)
    except Category.DoesNotExist:
        categoryObj = Category(name=opCategory, userID=request.user, type=type)
        categoryObj.save()
    operationObj = Operation(fromFinancialInstrumentID=FIObj, categoryID=categoryObj,
                             currency=opCurrency, sum=opSum, type=type)
    operationObj.save()
    coeff = 1 if type == 'S' else -1
    FIObj.balance -= coeff * opSum * getCurrencyCoeff(opCurrency, FIObj.currency)
    FIObj.save()
def addInvestOperation(contractName, currency, sum, type, tiker):
    contractObj = Contract.objects.filter(name=contractName)[0]
    allStocks = FinancialInstrument.objects.filter(contractID=contractObj)
    balance = allStocks.objects.filter(name=currency)
    if len(balance) == 0:
        balance = allStocks.objects.filter(name=contractObj.currency)
        sum *= getCurrencyCoeff(currency, balance.currency)
    else:
        balance = balance[0]
    if type == 'BS':
        balance.amount -= sum
        stockForSale = allStocks.objects.filter(stockID__tiker=tiker)
    elif type == 'SS':
        balance.amount += sum
def addTransfer(senderFIObj, receiverFIObj, transferSum):
    transferSum = float(transferSum)
    operationObj = Operation(type='T', sum=transferSum,
                             fromFinancialInstrumentID=senderFIObj, toFinancialInstrumentID=receiverFIObj,
                             currency=senderFIObj.currency)
    senderFIObj.balance -= transferSum
    receiverFIObj.balance += transferSum * getCurrencyCoeff(senderFIObj.currency, receiverFIObj.currency)
    senderFIObj.save()
    receiverFIObj.save()
    operationObj.save()
def getUserOperations(request):
    if request.user.is_authenticated:
        operations = Operation.objects.filter(fromFinancialInstrumentID__contractID__userID=request.user)
    else:
        operations = []
    return operations
def getBankAccounts(request):
    if request.user.is_authenticated:
        bankAccounts = FinancialInstrument.objects.filter(contractID__userID=request.user).filter(type='B')
    else:
        bankAccounts = []
    return bankAccounts
def bankAccountFormat(bankAccounts):
    colors = []
    CURRENCY_TYPES = dict(FinancialInstrument.CURRENCY_TYPES)
    for account in bankAccounts:
        if account.balance > 0:
            color = 'green'
        elif account.balance < 0:
            color = 'red'
        else:
            color = 'info'
        colors.append(color)
        account.balance = floatFormating(account.balance)
        account.currency = CURRENCY_TYPES[account.currency]
    return bankAccounts, colors
def getBrokerAccountBalance(account):
    balance = 0
    money = 0
    actives = FinancialInstrument.objects.filter(contractID=account)
    stocks = actives.filter(type='I')
    moneyAccounts = actives.filter(type='C')
    investedSum = 0
    for stock in stocks:
        currencyCoeff = getCurrencyCoeff(stock.stockID.currency, account.currency)
        balance += stock.amount * getStockPrice(stock.stockID) * currencyCoeff
        investedSum += stock.avgPrice * stock.amount * currencyCoeff
    sumDelta = balance - investedSum
    for moneyAccount in moneyAccounts:
        currencyCoeff = getCurrencyCoeff(moneyAccount.currency, account.currency)
        money += moneyAccount.balance * currencyCoeff
    balance += money
    percentageDifference = sumDelta / (investedSum + money) * 100
    isProfitable = True if sumDelta >= 0 else False
    return balance, sumDelta, percentageDifference, isProfitable
def getBrokerAccountBalanceStructureCurrency(account):
    currencys = set()
    balance = 0
    money = 0
    actives = FinancialInstrument.objects.filter(contractID=account)
    stocks = actives.filter(type='I')
    moneyAccounts = actives.filter(type='C')
    investedSum = 0
    for stock in stocks:
        currencyCoeff = getCurrencyCoeff(stock.stockID.currency, account.currency)
        balance += stock.amount * getStockPrice(stock.stockID) * currencyCoeff
        investedSum += stock.avgPrice * stock.amount * currencyCoeff
    sumDelta = balance - investedSum
    for moneyAccount in moneyAccounts:
        currencyCoeff = getCurrencyCoeff(moneyAccount.currency, account.currency)
        money += moneyAccount.balance * currencyCoeff
        currencys.add(moneyAccount.currency)
    balance += money
    percentageDifference = sumDelta / (investedSum + money) * 100
    return balance, stocks, moneyAccounts, currencys, sumDelta, percentageDifference
def getBrokerAccounts(request):
    if request.user.is_authenticated:
        brokerAccounts = Contract.objects.filter(userID=request.user).filter(type='I')
    else:
        brokerAccounts = []
    data = [getBrokerAccountBalance(account) for account in brokerAccounts]
    balance = []
    sumDelta = []
    percentageDifference = []
    isProfitable = []
    for d in data:
        balance.append(d[0])
        sumDelta.append(d[1])
        percentageDifference.append(d[2])
        isProfitable.append(d[3])
def brokerAccountsFormat(brokerAccounts, balances, sumDelta, percentageDifference):
    CURRENCY_TYPES = dict(FinancialInstrument.CURRENCY_TYPES)
    balancesFormat = [floatFormating(balance) + ' ' + CURRENCY_TYPES[account.currency]
                      for account, balance in zip(brokerAccounts, balances)]
    sumDeltaFormat = [floatFormating(sd) + ' ' + CURRENCY_TYPES[account.currency]
                      for account, sd in zip(brokerAccounts, sumDelta)]
    percentageFormat = [floatFormating(i) for i in percentageDifference]
    return brokerAccounts, balancesFormat, sumDeltaFormat, percentageFormat
def getAccountStocks(brokerAccount):
    FinancialInstrument.objects.filter(contractID=brokerAccount)
def addCurrencyToBrokerAccount(account, currency):
    nuwCurr = FinancialInstrument(contractID=account, name=currency, currency=currency, type='C')
    nuwCurr.save()
def addStockOperation(account, buyTiker, buyQuantity, buyAvgPrice, buyCurrency, type='buy'):
    buyAvgPrice = float(buyAvgPrice)
    buyQuantity = float(buyQuantity)
    buyQuantity *= 1 if type == 'buy' else -1
    type = 'BS' if type == 'buy' else 'SS'
    try:
        stock = Stock.objects.get(tiker=buyTiker)
    except Stock.DoesNotExist:
        stock = Stock(tiker=buyTiker, currency=buyCurrency)
        stock.save()
    financialInstruments = FinancialInstrument.objects.filter(contractID=account)
    totalSumm = buyAvgPrice * buyQuantity
    try:
        stockFI = financialInstruments.get(stockID__tiker=buyTiker)
        total = stockFI.amount * stockFI.avgPrice + totalSumm
        stockFI.amount += buyQuantity
        stockFI.avgPrice = total / stockFI.amount
    except FinancialInstrument.DoesNotExist:
        stockFI = FinancialInstrument(contractID=account, stockID=stock, name=buyTiker, type='I', amount=buyQuantity,
                                      avgPrice=buyAvgPrice, currency=buyCurrency)
    stockFI.save()
    try:
        balance = financialInstruments.get(name=buyCurrency)
    except FinancialInstrument.DoesNotExist:
        balance = financialInstruments.get(name=account.currency)
        totalSumm *= getCurrencyCoeff(buyCurrency, balance.currency)
    balance.balance -= totalSumm
    balance.save()
    investOperation = Operation(fromFinancialInstrumentID=balance, toFinancialInstrumentID=stockFI, type=type, sum=-totalSumm, currency=balance.currency)
    investOperation.save()
def getBankAccountOperations(financialInstrument):
    operatonsFrom = Operation.objects.filter(fromFinancialInstrumentID=financialInstrument)
    operatonsTo = Operation.objects.filter(toFinancialInstrumentID=financialInstrument)
    operations = operatonsFrom | operatonsTo
    operations = operations.order_by('-dateTime')
    CURRENCY_TYPES = dict(financialInstrument.CURRENCY_TYPES)
    for operation in operations:
        operation.sum = floatFormating(operation.sum)
        operation.currency = CURRENCY_TYPES[operation.currency]
    return operations
def getAllSpending(request):
    if not request.user.is_authenticated:
        return []
    else:
        operations = Operation.objects.filter(fromFinancialInstrumentID__contractID__userID=request.user).filter(type='S')
        CURRENCY_TYPES = dict(FinancialInstrument.CURRENCY_TYPES)
        operations = operations.order_by('-dateTime')
        for operation in operations:
            operation.sum = floatFormating(operation.sum)
            operation.currency = CURRENCY_TYPES[operation.currency]
        return operations
def getAllIncomes(request):
    if not request.user.is_authenticated:
        return []
    else:
        operations = Operation.objects.filter(fromFinancialInstrumentID__contractID__userID=request.user).filter(type='I')
        CURRENCY_TYPES = dict(FinancialInstrument.CURRENCY_TYPES)
        operations = operations.order_by('-dateTime')
        for operation in operations:
            operation.sum = floatFormating(operation.sum)
            operation.currency = CURRENCY_TYPES[operation.currency]
        return operations
def getAccountsForTransfer(request):
    if not request.user.is_authenticated:
        return []
    else:
        accounts = FinancialInstrument.objects.filter(contractID__userID=request.user)
        bankAccounts = accounts.filter(type='B')
        brokerAccounts = accounts.filter(type='C')
        accounts = bankAccounts | brokerAccounts
        return accounts.order_by('type')
def getTotalBalance(request, bankAccounts, brokerAccounts, brokerBalances, currency='RUB'):
    if not request.user.is_authenticated:
        return
    else:
        balance = 0
        for account in bankAccounts:
            balance += account.balance * getCurrencyCoeff(account.currency, currency)
        for account, brokerBalance in zip(brokerAccounts, brokerBalances):
            balance += brokerBalance * getCurrencyCoeff(account.currency, currency)
        return balance
def totalBalanceFormat(balance, currency='RUB'):
    if balance > 0:
        color = 'green'
    elif balance < 0:
        color = 'red'
    else:
        color = 'info'
    CURRENCY_TYPES = dict(FinancialInstrument.CURRENCY_TYPES)
    return floatFormating(balance) + ' ' + CURRENCY_TYPES[currency], color
def getCurrencySymbols(QuerySet):
    currencySymbols = dict(FinancialInstrument.CURRENCY_TYPES)
    for object in QuerySet:
        object.currency = currencySymbols[object.currency]
    return QuerySet
def getContractStocksInfo(contract, stocks, moneyAccounts):
    pks = []
    names = []
    amounts = []
    currentValues = []
    priceDeltas = []
    earnings = []
    isProfitable = []
    CURRENCY_TYPES = dict(FinancialInstrument.CURRENCY_TYPES)
    for moneyAccount in moneyAccounts:
        pks.append(moneyAccount.pk)
        names.append(moneyAccount.name)
        amounts.append(floatFormating(moneyAccount.amount + moneyAccount.balance) + ' ' + CURRENCY_TYPES[moneyAccount.currency])
        currentValues.append(floatFormating((moneyAccount.amount + moneyAccount.balance) * getCurrencyCoeff(moneyAccount.currency, contract.currency)) + ' ' + CURRENCY_TYPES[contract.currency])
        if moneyAccount.amount == 0:
            priceDeltas.append('-')
            earnings.append('-')
            isProfitable.append('-')
        else:
            currentPrice = getStockPrice(moneyAccount.stockID.tiker)
            priceDelta = currentPrice - moneyAccount.avgPrice
            priceDeltas.append(floatFormating(abs(priceDelta) / moneyAccount.avgPrice * 100))
            earnings.append(floatFormating(moneyAccount.amount * abs(priceDelta)))
            isProfitable.append(True if priceDelta >= 0 else False)
    for stock in stocks:
        pks.append(stock.pk)
        names.append(stock.name)
        amounts.append(floatFormating(stock.amount))
        currentValues.append(floatFormating(stock.amount * getStockPrice(stock.stockID) * getCurrencyCoeff(stock.currency, contract.currency)) + ' ' + CURRENCY_TYPES[contract.currency])
        currentPrice = getStockPrice(stock.stockID)
        priceDelta = currentPrice - stock.avgPrice
        priceDeltas.append(floatFormating(abs(priceDelta) / stock.avgPrice * 100))
        earnings.append(floatFormating(stock.amount * abs(priceDelta) * getCurrencyCoeff(stock.currency, contract.currency)) + ' ' + CURRENCY_TYPES[contract.currency])
        isProfitable.append(True if priceDelta >= 0 else False)
    return zip(pks, names, amounts, currentValues, priceDeltas, isProfitable, earnings)
def floatFormating(a):
    sign = ''
    if a < 0:
        sign = '-'
        a *= -1
    if int(a) != a:
        a = format(a, '.2f')
        a = str(a)
        a1, a2 = a.split('.')
        l1 = len(a1)
        for i in range(l1 - 3, 0, -3):
            a11 = a1[:i]
            a12 = a1[i:]
            a1 = a11 + ' ' + a12
        return sign + a1 + '.' + a2
    else:
        a = format(a, '.0f')
        a1 = str(a)
        l1 = len(a1)
        for i in range(l1 - 3, 0, -3):
            a11 = a1[:i]
            a12 = a1[i:]
            a1 = a11 + ' ' + a12
        return sign + a1
def accBallanceList(accounts):
    CURRENCY_TYPES = dict(FinancialInstrument.CURRENCY_TYPES)
    for account in accounts:
        account.balance = floatFormating(account.balance) + ' ' + CURRENCY_TYPES[account.currency]
    return accounts

- admin.py

from django.contrib import admin
from accounting.models import Bank, Contract, Stock, FinancialInstrument, Operation, Category
admin.site.register(Bank)
admin.site.register(Contract)
admin.site.register(Stock)
admin.site.register(FinancialInstrument)
admin.site.register(Operation)
admin.site.register(Category)

- tests.py

from django.test import TestCase

- urls.py

"""diploma URL Configuration
The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URL conf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.urls import path
from . import views
urlpatterns = [
    path('bank-accounts/', views.bankAccountsView, name='bank-accounts-page'),
    path('broker-accounts/', views.brokerAccountsView, name='broker-accounts-page'),
    path('bank-accounts/<int:pk>', views.bankAccountView, name='bank-accounts'),
    path('broker-accounts/<int:pk>', views.brokerAccountView, name='broker-accounts'),
    path('new-account', views.newAccountView, name='new-account'),
]

- views.py

from django.shortcuts import render, redirect, get_object_or_404
from accounting.operations import addBankAccount, addOperation, addTransfer, getUserOperations, getBankAccounts, \
    floatFormating, getBankAccountOperations, getCurrencySymbols, getAccountsForTransfer, accBallanceList, \
    getAllSpending, getAllIncomes, addBrokerAccount, getBrokerAccounts, bankAccountFormat, brokerAccountsFormat, \
    getBrokerAccountBalanceStructureCurrency, addCurrencyToBrokerAccount, addStockOperation, getContractStocksInfo, \
    getTotalBalance, totalBalanceFormat
from accounting.models import FinancialInstrument, Category, Operation, Contract, Bank
def bankAccountView(request, pk):
    if request.user.is_anonymous:
        return redirect('login')
    bankAccount = get_object_or_404(FinancialInstrument.objects.filter(contractID__userID=request.user), pk=pk)
    if request.method == 'POST' and request.user.is_authenticated:
        if 'opSum' in request.POST:
            opCurrency = request.POST['opCurrency']
            opCategory = request.POST['opCategory']
            opSum = request.POST['opSum']
            addOperation(request, bankAccount, opCategory, opCurrency, opSum, type='S')
        if 'incSum' in request.POST:
            opCurrency = request.POST['incCurrency']
            opCategory = request.POST['incCategory']
            opSum = request.POST['incSum']
            addOperation(request, bankAccount, opCategory, opCurrency, opSum, type='I')
        if 'transSum' in request.POST:
            transSum = request.POST['transSum']
            toAcc = request.POST['toAcc']
            addTransfer(bankAccount, FinancialInstrument.objects.get(pk=toAcc), transSum)
    balance = floatFormating(bankAccount.balance)
    categories = Category.objects.filter(userID=request.user)
    spendingsCategories = categories.filter(type='S')
    incomeCategories = categories.filter(type='I')
    operations = getBankAccountOperations(bankAccount)
    symbol = dict(FinancialInstrument.CURRENCY_TYPES)[bankAccount.currency]
    CURRENCY_TYPES = FinancialInstrument.CURRENCY_TYPES
    accounts = getAccountsForTransfer(request)
    context = {'bankAccount': bankAccount, 'balance': balance, 'CURRENCY_TYPES': CURRENCY_TYPES,
               'spendingsCategories': spendingsCategories, 'incomeCategories': incomeCategories,
               'operations': operations, 'symbol': symbol, 'accounts': accounts, 'operationsLen': len(operations)}
    return render(request, 'accounting/BankAccount.html', context=context)
def brokerAccountView(request, pk):
    if request.user.is_anonymous:
        return redirect('login')
    account = get_object_or_404(Contract.objects.filter(userID=request.user), pk=pk)
    if request.method == 'POST' and request.user.is_authenticated:
        if 'buyTiker' in request.POST:
            buyTiker = request.POST['buyTiker']
            buyQuantity = request.POST['buyQuantity']
            buyAvgPrice = request.POST['buyAvgPrice']
            buyCurrency = request.POST['buyCurrency']
            addStockOperation(account, buyTiker, buyQuantity, buyAvgPrice, buyCurrency, type='buy')
        if 'sellTiker' in request.POST:
            sellTiker = request.POST['sellTiker']
            sellQuantity = request.POST['sellQuantity']
            sellAvgPrice = request.POST['sellAvgPrice']
            sellCurrency = request.POST['sellCurrency']
            addStockOperation(account, sellTiker, sellQuantity, sellAvgPrice, sellCurrency, type='sell')
        if 'transSum' in request.POST:
            transSum = request.POST['transSum']
            fromAcc = request.POST['fromAcc']
            toAcc = request.POST['toAcc']
            addTransfer(FinancialInstrument.objects.get(pk=fromAcc), FinancialInstrument.objects.get(pk=toAcc), transSum)
        if 'addCurrency' in request.POST:
            currency = request.POST['addCurrency']
            addCurrencyToBrokerAccount(account, currency)
    balance, stocks, money, currencys, sumDelta, percentageDifference = getBrokerAccountBalanceStructureCurrency(account)
    color = 'green' if sumDelta >= 0 else 'red'
    account, balance, sumDelta, percentageDifference = brokerAccountsFormat((account,), (balance,), (sumDelta,), (percentageDifference,))
    account = account[0]
    balance = balance[0]
    sumDelta = sumDelta[0]
    percentageDifference = percentageDifference[0]
    CURRENCY_TYPES = FinancialInstrument.CURRENCY_TYPES
    accountsForTransfer = getAccountsForTransfer(request)
    stocksTable = getContractStocksInfo(account, stocks, money)
    context = {'account': account, 'balance': balance, 'CURRENCY_TYPES': CURRENCY_TYPES, 'stocks': stocks,
               'sumDelta': sumDelta, 'percentageDifference': percentageDifference, 'color': color,
               'money': money, 'moneyQ': len(money), 'accountsForTransfer': accountsForTransfer, 'currencys': currencys,
               'stocksTable': stocksTable}
    return render(request, 'accounting/brokerAccount.html', context=context)
def newAccountView(request):
    if request.user.is_anonymous:
        return redirect('login')
    if request.method == 'POST' and request.user.is_authenticated:
        if 'bsName' in request.POST:
            bsName = request.POST['bsName']
            bsBalance = request.POST['bsBalance']
            bsCurrency = request.POST['bsCurrency']
            bankName = request.POST['bankName']
            addBankAccount(request, bankName, bsName, bsCurrency, bsBalance)
        if 'isName' in request.POST:
            isName = request.POST['isName']
            isBalance = request.POST['isBalance']
            isCurrency = request.POST['isCurrency']
            brokerName = request.POST['brokerName']
            addBrokerAccount(request, brokerName, isName, isCurrency, isBalance)
    banks = Bank.objects.all()
    CURRENCY_TYPES = FinancialInstrument.CURRENCY_TYPES
    bankAccounts = getBankAccounts(request)
    bankAccountsNum = len(bankAccounts)
    brokerAccounts, balances, sumDelta, percentageDifference = getBrokerAccounts(request)
    brokerAccountsNum = len(brokerAccounts)
    brokerAccounts, balances = brokerAccountsFormat(brokerAccounts, balances, sumDelta, percentageDifference)
    bankAccounts, colors = bankAccountFormat(bankAccounts)
    brokerAccountsBalance = zip(brokerAccounts, balances)
    bankAccountsColor = zip(bankAccounts, colors)
    context = {'banks': banks, 'CURRENCY_TYPES': CURRENCY_TYPES, 'bankAccountsNum': bankAccountsNum,
               'brokerAccountsNum': brokerAccountsNum, 'bankAccountsColor': bankAccountsColor, 'brokerAccountsBalance': brokerAccountsBalance}
    return render(request, 'accounting/newAccount.html', context=context)
def bankAccountsView(request):
    if request.user.is_anonymous:
        return redirect('login')
    bankAccounts = getBankAccounts(request)
    bankAccountsNum = len(bankAccounts)
    accountsNum = bankAccountsNum
    if accountsNum >= 2:
        totalBalance = getTotalBalance(request, bankAccounts, [], [])
        totalBalance, totalBalanceColor = totalBalanceFormat(totalBalance)
    else:
        totalBalance = None
        totalBalanceColor = None
    bankAccounts, colors = bankAccountFormat(bankAccounts)
    bankAccountsColor = zip(bankAccounts, colors)
    incomes = getAllIncomes(request)
    spendings = getAllSpending(request)
    title = 'Банковские счета'
    context = {'totalBalance': totalBalance, 'totalBalanceColor': totalBalanceColor, 'bankAccounts': bankAccountsColor, 'accountsNum': accountsNum,
               'spendings': spendings, 'incomes': incomes, 'title': title, 'bankActive': 'active'}
    return render(request, 'accounting/accounts.html', context=context)
def brokerAccountsView(request):
    if request.user.is_anonymous:
        return redirect('login')
    brokerAccounts, brokerBalances, sumDelta, percentageDifference = getBrokerAccounts(request)
    brokerAccountsNum = len(brokerAccounts) + (1 if brokerAccounts[0].currency != 'RUB' else 0)
    accountsNum = brokerAccountsNum
    if accountsNum >= 2:
        totalBalance = getTotalBalance(request, [], brokerAccounts, brokerBalances)
        totalBalance, totalBalanceColor = totalBalanceFormat(totalBalance)
    else:
        totalBalance = None
        totalBalanceColor = None
    brokerAccounts, brokerBalances, _, _ = brokerAccountsFormat(brokerAccounts, brokerBalances, sumDelta, percentageDifference)
    brokerAccountsBalance = zip(brokerAccounts, brokerBalances)
    print(brokerAccounts, brokerBalances)
    title = 'Брокерские счета'
    context = {'totalBalance': totalBalance, 'totalBalanceColor': totalBalanceColor,
               'brokerAccountsBalance': brokerAccountsBalance, 'accountsNum': accountsNum, 'brokerActive': 'active',
               'title': title}
    return render(request, 'accounting/accounts.html', context=context)


main:
- models.py

from django.db import models

- apps.py

from django.apps import AppConfig
class MainConfig(AppConfig):
    name = 'main'

- admin.py

from django.contrib import admin

- tests.py

from django.test import TestCase

- urls.py

"""diploma URL Configuration
The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.urls import path
from . import views
urlpatterns = [
    path('', views.index, name='main'),
]

- views.py

from django.shortcuts import render, redirect, get_object_or_404
from accounting.operations import addBankAccount, addOperation, addTransfer, getUserOperations, getBankAccounts, \
    floatFormating, getBankAccountOperations, getCurrencySymbols, getAccountsForTransfer, accBallanceList, \
    getAllSpending, getAllIncomes, getBrokerAccounts, bankAccountFormat, brokerAccountsFormat, getTotalBalance,\
    totalBalanceFormat
from accounting.models import FinancialInstrument, Category, Operation
def index(request):
    if request.user.is_anonymous:
        return redirect('login')
    bankAccounts = getBankAccounts(request)
    bankAccountsNum = len(bankAccounts)
    brokerAccounts, brokerBalances, sumDelta, percentageDifference = getBrokerAccounts(request)
    brokerAccountsNum = len(brokerAccounts)
    accountsNum = bankAccountsNum + brokerAccountsNum
    if accountsNum >= 2:
        totalBalance = getTotalBalance(request, bankAccounts, brokerAccounts, brokerBalances)
        totalBalance, totalBalanceColor = totalBalanceFormat(totalBalance)
    else:
        totalBalance = None
        totalBalanceColor = None
    brokerAccounts, brokerBalances, _, _ = brokerAccountsFormat(brokerAccounts, brokerBalances, sumDelta, percentageDifference)
    bankAccounts, colors = bankAccountFormat(bankAccounts)
    brokerAccountsBalance = zip(brokerAccounts, brokerBalances)
    bankAccountsColor = zip(bankAccounts, colors)
    incomes = getAllIncomes(request)
    spendings = getAllSpending(request)
    context = {'totalBalance': totalBalance, 'totalBalanceColor': totalBalanceColor, 'bankAccounts': bankAccountsColor, 'brokerAccountsBalance':brokerAccountsBalance, 'accountsNum': accountsNum,
               'spendings': spendings, 'incomes': incomes}
    return render(request, 'accounts.html', context=context)



userPages:
- models.py

from django.db import models

- apps.py

from django.apps import AppConfig
class UserpagesConfig(AppConfig):
    name = 'userPages'

- forms.py

from django.contrib.auth.models import User
from django.forms import ModelForm, TextInput, PasswordInput
class LoginForm(ModelForm):
    class Meta:
        model = User
        fields = ['login', 'password']
        widgets = {
            'login': TextInput(attrs={
                'class': "form-control",
                'placeholder': "Логин"
            }),
            'password': PasswordInput(attrs={
                'class': "form-control",
                'placeholder': "Пароль"
            })
        }
- admin.py

from django.contrib import admin

- tests.py

from django.test import TestCase

- urls.py

"""diploma URL Configuration
The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.urls import path
from . import views
urlpatterns = [
    path('', views.index, name='index'),
    path('registration', views.registration, name='registration'),
    path('logout', views.logoutRedirect, name='logout'),
]

- views.py

from django.shortcuts import render, redirect
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth import authenticate, login, logout
def index(request):
    return redirect('/')
def registration(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            logout(request)
            form.save()
            username = form.cleaned_data['username']
            password = form.cleaned_data['password1']
            user = authenticate(username=username, password=password)
            login(request, user)
            return redirect('index')
    else:
        form = UserCreationForm()
    context = {'form': form}
    return render(request, 'registration/registration.html', context=context)
def logoutRedirect(request):
    logout(request)
    return redirect('/')

